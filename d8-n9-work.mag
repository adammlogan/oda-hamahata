load "k3pic.mag";
load "project.mag";
// can we actually find the curve?  It's actually isomorphic to its
// Galois conjugate, and it's a quadratic twist by (-2 - sqrt 2) of a curve
// defined over Q, which makes sense (the curve and its conjugate are
// twists by a square in Q(sqrt 2)).
load "d8-n9.mag";
ls4 := LinearSystem(A,4);
ls4plus := LinearSystem(A,[i+i@@aut_s: i in Sections(ls4)|i+i@@al ne 0]);
ls4plus := LinearSystemTrace(ls4plus,S);

"mapping the Atkin-Lehner quotient to P^12";
P12 := ProjectiveSpace(Q,12);
to12 := map<S->P12|Sections(ls4plus)>;
rats := {@i/j: i in [-10..10], j in [1..10]@};
emp := EmptySubscheme(P12);
repeat
  emp join:= to12(Scheme(S,[S.1-Random(rats)*S.3,S.5-Random(rats)*S.6]));
  pto2 := [x: x in DefiningPolynomials(emp)|Degree(x) le 2];
  dto2 := {*Degree(i): i in pto2*}; dto2;
until dto2 eq {*2^^44*};
in12 := Scheme(P12,pto2);
cusp12 := to12(cusps[1]);
// degree 24 in P^12--not bad.
// We probably just have to project away from the cusp and then a line?

"mapping to P^11";
P11 := ProjectiveSpace(Q,11);
to11 := map<in12->P11|DefiningPolynomials(Cluster(cusp12))>;
emp := EmptySubscheme(P11);
repeat
  emp join:= to11(Scheme(in12,[P12.1-Random(rats)*P12.3,P12.5-Random(rats)*P12.6]));
  pto2 := [x: x in DefiningPolynomials(emp)|Degree(x) le 2];
  dto2 := {*Degree(i): i in pto2*}; dto2;
until dto2 eq {*2^^35*};
in11 := Scheme(P11,pto2);
sl11 := rep{x: x in PrimeComponents(Scheme(in11,[P11.i: i in [6..12]]))|IsSingular(in11(Parent(gp[1]))!Eltseq(gp)) where gp is GenericPoint(x)};

"projecting away from a line to obtain a K3 surface";
P9 := ProjectiveSpace(Q,9);
to9 := map<in11->P9|DefiningPolynomials(sl11)>;
emp := EmptySubscheme(P9);
repeat
  emp join:= to9(Scheme(in11,[P11.1-Random(rats)*P11.3,P11.5-Random(rats)*P11.6]));
  pto2 := [x: x in DefiningPolynomials(emp)|Degree(x) le 2];
  dto2 := {*Degree(i): i in pto2*}; dto2;
until dto2 eq {*2^^21*};
in9 := Scheme(P9,pto2);
// and we have a K3.  What can we do with it?

// Well, one thing we can try is to find some ... any ... genus-1 fibration
// and hope it is helpful.
"finding some rational quartic curves";
d4s := {@x: x in PrimeComponents(Scheme(in9,P9.i)), i in [1..10]|Dimension(x) eq 1 and Degree(x) eq 4@};

"using them to make genus-1 fibrations and their Jacobians";
res := [Difference(Scheme(in9,rep{x: x in DefiningPolynomials(d)|Degree(x) eq 1}),d): d in d4s];
P1 := ProjectiveSpace(Q,1);
// fibs := [Extend(map<in9->P1|[x: x in DefiningPolynomials(r)|Degree(x) eq 1]>): r in res];
fibs := [map<in9->P1|[x: x in DefiningPolynomials(r)|Degree(x) eq 1]>: r in res];
Qt<t> := FunctionField(Q);
P1t := ChangeRing(P1,Qt);
in9t := ChangeRing(in9,Qt);
fibst := [map<in9t->P1t|DefiningPolynomials(i)>: i in fibs];
gfts := [Difference((P1t![t,1])@@f,BaseScheme(f)): f in fibst];
gft3s := [Curve(RemoveLinearRelations(i)): i in gfts];
jac3s := [Jacobian(i): i in gft3s];
// these all look like they have rank 18 at least
// (A1 A5 A1 D4 D5 and A1 A5 A3 A1 A1 A1 D4)
// and actually they are only two fibrations.
// the first has Z/2Z torsion and the second has full level-2.
// We could turn it into A11 A1 D4 if we wanted to.  The other goes to
// A3 A2 A1 D4 D6 (note that one of the A1 above was actually III).

"finding the section";
// I think I'll try the second one.
rm1 := reduce_model(jac3s[2]);
trs := [Image(map<rm1->AmbientSpace(rm1)|[rm1.1-x[1]*rm1.3,rm1.2,rm1.3]>): x in Roots(DivisionPolynomial(rm1,2))];
tr1 := QuadraticTwist(trs[3],1/9);
// can we find a section?
// Twisting by 2 makes the components of the A3 and A5 defined.  So it's
// probably easier if we work with primes +-1 mod 8
// We can actually find it just by looking at some small primes.
Qr2<r2> := QuadraticField(2);
Qr2u<u> := FunctionField(Qr2);
tr1u := ChangeRing(tr1,Qr2u);
tt := [tr1u![0,1,0]] cat [Points(tr1u,i[1])[1]: i in Roots(DivisionPolynomial(tr1,2))];
pt := Points(tr1u,6*u^2-6)[1];
assert Height(pt) eq 5/12;
// This means the height is only 40, which is a healthy number.
// but how on earth will we get rid of the 5?

// I think there will be a fibration with 5-torsion and a point of height 8/5.
// The isogeny will then give 5-torsion and height 8, so disc 200.
// If we could then find a fibration with only a 5-section we'd have a chance,
// but I suspect that as before it will be too much to do this over Q.
/*
das := CartanMatrix("d4a5a3a1a1a1a1a1");
u := Matrix(2,2,[0,1,1,-2]);
m19 := DiagonalJoin(u,-das);       
for i in [1,3,7,12,15,16] do m19[i,19] := 1; m19[19,i] := 1; end for;
Z19 := RSpace(Z,19,m19);
Q19 := ChangeRing(Z19,Q);
tors := [Q19|Solution(GramMatrix(Q19),Vector(Q,i)): i in [[1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,0,0],[1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,1,1,0],[1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0]]];
sv := sub<Z19|[2*i: i in Basis(Z19)],[Z19|2*i: i in tors]>;
pic := RSpace(Z,19,Matrix(19,19,[Z|(x,y)/4: x,y in Basis(sv)]));

as := CartanMatrix("a4a4a4a4a1");
m19a := DiagonalJoin(u,-as);
for i in [1,7,14,18] do
  m19a[19,i] := 1; m19a[i,19] := 1;
end for;

Z19a := RSpace(Z,19,m19a);
Q19a := ChangeRing(Z19a,Q);
torsa := [Q19a|Solution(GramMatrix(Q19a),Vector(Q,i)): i in [[1,0, 1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1, 0],[1,0, 0,1,0,0, 0,0,0,1, 1,0,0,0, 0,0,1,0, 1],[1,0, 0,0,1,0, 1,0,0,0, 0,0,0,1, 0,1,0,0, 0],[1,0, 0,0,0,1, 0,0,1,0, 0,1,0,0, 1,0,0,0, 1]]];
sva := sub<Z19a|[5*i: i in Basis(Z19a)],[Z19a|5*i: i in torsa]>;
pica := RSpace(Z,19,Matrix(19,19,[Z|(x,y)/25: x,y in Basis(sva)]));
// and the dual groups are the same:
dg,dgto,q,ag := dualgp(el);  
dga,dgato,qa,aga := dualgp(el);   
assert same_dual(q,ag,qa,aga);
*/

"finding a good model in P^3";
// Anyway, let's find a model.
P21 := ProductProjectiveSpace(Q,[2,1]);
h := hom<CoordinateRing(AmbientSpace(tr1))->c|hom<Qt->c|c.4/c.5>,[c.1,c.2,c.3]> where c is FieldOfFractions(CoordinateRing(P21));
in21 := Surface(P21,Numerator(h(DefiningPolynomial(tr1))));

in5,to5 := SegreEmbedding(in21);
P5 := AmbientSpace(in5);
in3,to3 := map_lin(in5,[P5.i: i in [2,4,5,6]]);
P3 := AmbientSpace(in3);

P6 := ProjectiveSpace(Q,6);
ls2 := LinearSystem(P3,2);
ls2 := LinearSystem(ls2,Scheme(P3,[P3.3,P3.4]));
to6 := map<in3->P6|Sections(ls2)>;
in6 := Image(to6);
to6 := map<in3->in6|Sections(ls2)>;

in52,to52 := project(in6,P6![0,1,0,0,0,0,0]:amb := P5);
ss52 := SingularSubscheme(in52);
pcss52 := PrimaryComponents(ss52);
// we can't project away from the really bad singularity
in4,to4 := project(in52,rep{RationalPoints(x)[1]: x in pcss52|Degree(x) eq 4});

P4 := AmbientSpace(in4);
ls2 := LinearSystem(P4,2);
for i in PrimeComponents(SingularSubscheme(in4)) do
  ls2 := LinearSystem(ls2,i);
end for;
ls2 := LinearSystemTrace(ls2,in4);

to53 := map<in4->P5|Sections(ls2)>;
in53 := Image(to53);
to53 := map<in4->in53|Sections(ls2)>;
in32,to32 := map_lin(in53,rep{DefiningPolynomials(x): x in PrimeComponents(SingularSubscheme(in53))|Dimension(x) eq 1}: amb := P3);

// and somehow this is a good model with three rational and two conjugate A2s
// and two conjugate A1s.
cps := [to5,to3,to6,to52,to4,to53,to32];
// I'm not expecting to be able to do this over Q, but let's see how far we get
dto32 := &*cps;
csqf := [BaseChange(in21,hom<Q->Qr2|>)] cat [ChangeRing(Codomain(i),Qr2): i in cps];
dto32qf := &*[map<csqf[i]->csqf[i+1]|DefiningPolynomials(cps[i])>: i in [1..#cps]];
fibs := [Scheme(in21,P21.4-i*P21.5): i in [5..10]];
fibs32 := [Curve(dto32(i)): i in fibs];
fib32 := Extend(map<in32->P1|[P3.1+P3.2,P3.2]>);
P1qf := ProjectiveSpace(Qr2,1);
P1qfu := ProjectiveSpace(Qr2u,1);
secmap := func<x|map<P1qf->csqf[1]|[Evaluate(i,P1qf.1/P1qf.2): i in Eltseq(x)] cat [P1qf.i: i in [1,2]]>>;
in32qf := csqf[#csqf];
in32qfu := ChangeRing(in32,Qr2u);
fib32qf := map<in32qf->P1qf|AllDefiningPolynomials(fib32)>;
cs := curves_from_fibre(in32qf,LocalInformation(tr1u),fib32qf);
// 14, since 9 of 12 exceptional components are vertical
tor := Curve(Scheme(in32qf,[P3.3,P3.4]));
Include(~cs,tor);
morepts := [s*pt+t: s in [1,-1], t in tt];
cs join:= {@Curve(dto32qf(Image(secmap(i)))): i in morepts@};

"working with the new model over Q(sqrt 2)";
pc := PrimaryComponents(SingularSubscheme(in32));
Sort(~pc,func<x,y|d(y)-d(x)> where d is func<x|Degree(x)/Degree(ReducedSubscheme(x))>);
spts := [in32qf!Eltseq(i): i in RationalPoints(p,Qr2), p in pc];
degs := [2,2,2,2,2,1,1];
bls := make_blowups(in32qf: spts := spts, degs := degs);
mat35,hypvec := picmat(in32qf,bls,spts,degs,cs);
Z35,Z19,to19,cls := reduce_mat(mat35);
hyp := to19(hypvec);

"listing fibrations";
chs := list_chains(cls);
fibcl,ancl,dncl,encl,loops,dns,ens,ecl := ade_cls(chs,cls);
// we do have an A1^2 D4^2 D6 with full level-2 structure (is it the right one?)
// and an A1^4 D6^2 (but it must be wrong)
"finding the Galois action";
autqf := hom<Qr2->Qr2|-r2>;
perm := SymmetricGroup(35)!([3,4,1,2,5,6,7,8,9,10,12,11] cat [12+Index(cs,Curve(Scheme(in32qf,DefiningPolynomials(BaseChange(c,autqf))))): c in cs]);
assert forall{x: x,y in [1..35]|mat35[x,y] eq mat35[x^perm,y^perm]};
gal35 := hom<Z35->Z35|[Z35.(i^perm): i in [1..35]]>;
gal19 := hom<Z19->Z19|[to19(gal35(i@@to19)): i in Basis(Z19)]>;
fixgal := Kernel(hom<Z19->Z19|[i-gal19(i): i in Basis(Z19)]>);

// we seem to have an A1^2 D4^2 D6 with full level-2 structure--let's see.
"making a fibration with A1^2 D4^2 D6 fibres";
cubic_cl := 2*hyp-&+[cls[i]: i in [1..10] cat [13,14,22,24,27]];
addcl := 3*hyp-&+[cls[i]: i in [1,2,3,4,5,5,6,18,18,27]]-cubic_cl;

P3qf := AmbientSpace(in32qf);
ls2 := LinearSystem(P3qf,2);
for i in [1..5] do ls2 := LinearSystem(ls2,spts[i]); end for;
for i in [1,2,10,12,15] do ls2 := LinearSystem(ls2,cs[i]); end for;
assert #Sections(ls2) eq 1;
cubic := Scheme(in32qf,ls2.1);
for i in [1,2,10,12,15] do cubic := Difference(cubic,cs[i]); end for;
assert Dimension(cubic) eq 1 and Degree(cubic) eq 3 and IsPrime(Ideal(cubic));

ls3 := LinearSystem(P3qf,3);
ls3 := LinearSystem(ls3,cubic);
ls3 := LinearSystem(ls3,cs[15]);
dc6 := rep{x: x in PrimaryComponents(Scheme(in32qf,Ideal(cs[6])^2))|Dimension(x) eq 1};
ls3 := LinearSystem(ls3,dc6);
for i in [1..3] do ls3 := LinearSystem(ls3,spts[i]); end for;
// and again we don't have to worry about the double component above an A2.

kto1 := map<in32->P1|Sections(ls3)>;
//time kto1 := Extend(map<in32->P1|Sections(ls3)>);
in32t := ChangeRing(in32,Qt);
kto1t := map<in32t->P1t|AllDefiningPolynomials(kto1)>;
gft := (P1t![t,1])@@kto1t;
for i in [cs[6],cs[6],cs[15],cubic] do
  time gft := Difference(gft,Scheme(in32t,DefiningPolynomials(i)));
end for;
// there are sections over Q(sqrt 2), but not over Q.
gft := Curve(gft);
d4 := Scheme(gft,DefiningPolynomials(cs[3]));
div4 := Divisor(gft,Ideal(d4));              
P3t := AmbientSpace(gft);
dm := DivisorMap(div4);
dm := map<gft->P3t|DefiningPolynomials(dm)>;
// gft3 := Image(dm); // not so bad
ls2 := LinearSystem(P3t,2);
for i in [1..4] do
  ls2 := LinearSystem(ls2,dm(Scheme(gft,gft.i))); printf "%o ", #Sections(ls2);
end for;
dm := map<gft->BaseScheme(ls2)|DefiningPolynomials(dm)>;
jact := Jacobian(Curve(Codomain(dm)));
kjac := MinimalModel(jact);

"finding the 2-isogenous family with a D8 fibre";
tis := [Codomain(TwoIsogeny(Points(kjac,i[1])[1])): i in Roots(DivisionPolynomial(kjac,2))];
rm2 := reduce_model(rep{x: x in tis|exists{l: l in LocalInformation(x)|l[5] eq KodairaSymbol("I4*")}});
// let's put the I0* at 0 and infinity and the I4* at 1
li := LocalInformation(rm2);
i0s := [Numerator(Qt!Minimum(i[1])): i in li|i[5] eq KodairaSymbol("I0*")];
i4 := [Numerator(Qt!Minimum(i[1])): i in li|i[5] eq KodairaSymbol("I4*")];
pts := [P1(Q)|i eq 1 select [1,0] else [Roots(i)[1,1]]: i in i0s cat i4];
tr := TranslationOfSimplex(P1,pts);
ch := hom<Qt->Qt|Evaluate(d[1]/d[2],[t,1])> where d is DefiningPolynomials(tr);
rm2ch := BaseChange(rm2,ch);
"checking that it matches the fibration on the Kummer of the product";
tr2 := QuadraticTwist(Image(map<r->AmbientSpace(r)|[r.1-Roots(DivisionPolynomial(r,2))[1,1]*r.3,r.2,r.3]>) where r is rm2ch,(9/388)^2);
assert IsIsomorphic(tr2,EllipticCurve([0, (-10*t^3 - 88*t^2 + 98*t),0,(t^6 - 4*t^5 + 6*t^4 - 4*t^3 + t^2),0]));
// y^2 = x^3 + (-10*t^3 - 88*t^2 + 98*t)*x^2 + (t^6 - 
//    4*t^5 + 6*t^4 - 4*t^3 + t^2)*x

// and this is what we need to match.
// The I1 fibres are at -25/2 and -8.
