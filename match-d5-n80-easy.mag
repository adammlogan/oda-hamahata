// let's try to do the match just at the D8D4D4 stage.
c20<z20> := CyclotomicField(20);
r20<p20> := sub<c20|z20+1/z20>;
r20t20<t20> := FunctionField(r20);
P1 := ProjectiveSpace(r20,1);
P1t := ChangeRing(P1,r20t20);

"looking to match with a D8D4D4 fibration";
ti2 := EllipticCurve([0,(-8*t^4 - 256*t^3 - 464*t^2 + 6464*t - 7656),0,(16*t^8 - 1216*t^6 + 3840*t^5 + 19936*t^4 - 145920*t^3 + 350784*t^2 - 380160*t + 156816),0]) where t is t20;
F := r20; Fr<r> := FunctionField(F);     
to_r_hom := hom<F->Fr|p20>;
// I4* I1 I1 fibres on ti2
tr0 := TranslationOfSimplex(P1,[P1(r20)|[3,1],[1,0],[-13,1]]);

"taking equations from Kuwata-Shioda";
// Kuwata-Shioda, section 4.2
d8d4d4 := func<p,q|EllipticCurve([0,-t20*(t20-1)*((p*q+1)*t20-p-q),0,p*q*t20^2*(t20-1)^4,0])>;
phi := Roots(Polynomial([-1,-1,1]),r20)[1,1];
ecs := [EllipticCurve(i): i in [[0,phi+1,0,-98*phi-157,-563*phi-725],[0,1,0,-1,0],[0,1,0,5*phi-16,-17*phi+16],[0,1,0,-41,-116],[0,1,0,-5*phi-11,17*phi-1],[0,-phi-1,0,100*phi-256,464*phi-1032]]];
tps := [[x[1]: x in Roots(DivisionPolynomial(i,2))]: i in ecs];
ps := [{@(a-c)/(b-c): a,b,c in s|#{a,b,c} eq 3@}: s in tps];

/*for i in [1..6], j in [i+1..6] do
  for p in ps[i], q in ps[j] do
    e := d8d4d4(p,q);
    disc := Numerator(Discriminant(e));
    if #Roots(disc) eq 4 then
      pts := [P1(r20)|[1,1]] cat [P1(r20)|[r[1]]: r in Roots(disc)|r[2] eq 1];
      tr1 := TranslationOfSimplex(P1,pts);
      tr2 := TranslationOfSimplex(P1,[pts[i]: i in [1,3,2]]);
      trs := [tr0^-1*i: i in [tr1,tr2]];
      homs := [hom<Fr->Fr|Evaluate(d[1]/d[2],[r,1])> where d is DefiningPolynomials(i): i in trs];
      chs := [BaseChange(e,i): i in homs];
      if exists{e: e in chs|forall{s: s in [r+4*p20^2-7,r-4*p20^2+13]|LocalInformation(e,s)[5] eq KodairaSymbol("I0*")}} then <i,j,Index(ps[i],p),Index(ps[j],q)>; end if;
    end if;
  end for;
end for;*/
"making the appropriate choice of fibration";
p := ps[3,1]; q := ps[5,4]; // 3,5 and 1 or 3, 4 or 6
assert p eq (t[1]-t[3])/(t[2]-t[3]) where t is tps[3];
assert q eq (t[2]-t[1])/(t[3]-t[1]) where t is tps[5];
// so the Kummer is twisted by (tps[3,2]-tps[3,3])/(tps[5,3]-tps[5,1]).
tw := (tps[3,2]-tps[3,3])/(tps[5,3]-tps[5,1]);
e := d8d4d4(p,q);
disc := Numerator(Discriminant(e));
pts := [P1(r20)|[1,1]] cat [P1(r20)|[r[1]]: r in Roots(disc)|r[2] eq 1];
"changing coordinates";
tr1 := TranslationOfSimplex(P1,pts);
tr2 := TranslationOfSimplex(P1,[pts[i]: i in [1,3,2]]);
trs := [tr0^-1*i: i in [tr1,tr2]];
homs := [hom<Fr->Fr|Evaluate(d[1]/d[2],[r,1])> where d is DefiningPolynomials(i): i in trs];
chs := [BaseChange(e,i): i in homs];
assert IsIsomorphic(ti2,QuadraticTwist(chs[1],tw));
"found a fibration that will match";
