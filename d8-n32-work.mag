load "d8-n32.mag";
load "project.mag";
load "k3pic.mag";
P5w := ProjectiveSpace(Q,[1,1,1,1,1,2]);
ls2 := LinearSystem(A,2);
ls2plus := LinearSystem(A,[i+i@@aut_s: i in Sections(ls2)|i+i@@aut_s ne 0]);
"embedding the Atkin-Lehner quotient into weighted P^5";
to5w := map<S->P5w|[A.1+32*A.6,A.2+8*A.5,A.3+2*A.4,A.7+2*A.8,A.9,rep{c: c in Sections(ls2plus)|Degree(c,10) eq 1}]>;
assert aut_s*to5w eq to5w;
in5w := Image(to5w);
cusps_5w := {@to5w(i): i in cusps_s@};

// OK, maybe we need an actual projective thing
ls2 := LinearSystem(P5w,2);
for i in cusps_5w do ls2 := LinearSystem(ls2,i); end for;
ls2 := LinearSystemTrace(ls2,in5w);
P9 := ProjectiveSpace(Q,9);
to9 := map<in5w->P9|Sections(ls2)>;
// in9 := Image(to9);
emp := EmptySubscheme(P9);
"mapping to P^9";
rats := {@x/y: x in [-10..10], y in [1..10]@};
repeat
  emp join:= to9(Scheme(in5w,[P5w.1+Random(rats)*P5w.2,P5w.3+Random(rats)*P5w.4]));
  pto3 := [x: x in DefiningPolynomials(emp)|Degree(x) le 3];
  dto3 := {*Degree(i): i in pto3*}; dto3;
until dto3 eq {*2^^17,3^^10*};
// surface of degree 24
in9 := Surface(P9,pto3);
// and presumably we need to figure out where the cusps went.
// looks like each one became a line.
"finding the singular lines";
slines := [Curve(x): x in PrimeComponents(Scheme(in9,P9.10))|Degree(x) eq 1];
assert forall{x: x in slines|IsSingular(in9(Parent(gp[1]))!Eltseq(gp)) where gp is GenericPoint(x)};

/*P7 := ProjectiveSpace(Q,7);
emp := EmptySubscheme(P7);
pr1 := map<in9->P7|DefiningPolynomials(slines[1])>;
repeat
  emp join:= pr1(Scheme(in9,[P9.1+Random(rats)*P9.2,P9.3+Random(rats)*P9.4]));
  pto3 := [x: x in DefiningPolynomials(emp)|Degree(x) le 3];
  dto3 := {*Degree(i): i in pto3*}; dto3;
until dto3 eq {*2^^7,3^^6*};
assert Degree(Scheme(P7,dto3)) eq 18;
*/
// right, if we project away we get degree 18.  Unfortunately we can't project
// away from "all four"--or maybe we can.  That gives us a genus-1 fibration.

"finding genus-1 fibration by projecting away from four lines";
P1 := ProjectiveSpace(Q,1);
sl := &join slines;
to1 := map<in9->P1|[x: x in DefiningPolynomials(sl)|Degree(x) eq 1]>;
Qt<t> := FunctionField(Q);
in9t := ChangeRing(in9,Qt);
P1t := ProjectiveSpace(Qt,1);
to1t := map<in9t->P1t|DefiningPolynomials(to1)>;
gft := (P1t![t,1])@@to1t;
P9t := AmbientSpace(in9t);
/*for i in slines, j in [1,2] do
  time gft := Difference(gft,Scheme(P9t,DefiningPolynomials(i)));
end for;*/
gft := Curve(ProjectiveClosure(Scheme(AmbientSpace(ap),DefiningPolynomials(ap))) where ap is AffinePatch(gft,1));
// well, it really is arithmetic genus 1 and degree 16.
// as far as I can tell the multisection degree is 4.
d4s := [&join PrimeComponents(Scheme(gft,DefiningPolynomials(i))): i in slines];
//gft5,gftto5 := map_lin(gft,[x: x in DefiningPolynomials(d4s[1])|Degree(x) eq 1]);

"finding the images of divisors on the generic fibre under a projection";
ls1 := LinearSystem(P9t,[x: x in DefiningPolynomials(&join d4s[1..3])|Degree(x) eq 1]);
ls1 := LinearSystemTrace(ls1,gft);
divs := [d4s[4],Scheme(gft,[gft.4,gft.5]),Scheme(gft,[gft.4,gft.6-gft.8]),Scheme(gft,[gft.5,gft.7-gft.8])];
P2t := ProjectiveSpace(Qt,2);
to2t := map<gft->P2t|Sections(ls1)>;
imdivs := [to2t(gft meet i): i in divs];
im4 := &join imdivs;
"finding a curve containing them, and verifying that it is the image";
c4 := Curve(P2t,rep{x: x in DefiningPolynomials(im4)|Degree(x) eq 4});
to2t := map<gft->c4|Sections(ls1)>;

"converting it into a curve of arithmetic genus 1";
ssc4 := SingularSubscheme(c4);
ls2 := LinearSystem(P2t,2);
P3t := ProjectiveSpace(Qt,3);
ls2 := LinearSystem(ls2,ssc4);
to3t := map<c4->P3t|Sections(ls2)>;
gf3 := Image(to3t);

// this should be a K3 surface
jac := Jacobian(gf3);
mm := MinimalModel(jac);
"simplifying the model and finding an isogenous surface";
rm := reduce_model(mm);
// d5 d5 a1 a7?  wait a minute, rank 20?
// yes, indeed, this isogeny class admits complex multiplication.
// because we have a rational point of order 4, all the components must
// be rational already.
ti := Codomain(TwoIsogeny(Points(rm,Roots(DivisionPolynomial(rm,2))[1,1])[1]));
i4 := Roots(Numerator(Qt!Minimum(rep{x[1]: x in LocalInformation(ti)|x[5] eq KodairaSymbol("I4")})))[1,1];
chti := BaseChange(ti,hom<Qt->Qt|t*i4>); 
"verifying the match";
assert IsIsomorphic(chti,EllipticCurve([0,t^3+t,0,-4*t^4,-4*t^7-4*t^5]));

// can reduce the model further
crm := BaseChange(rm,hom<Qt->Qt|8192*t>);
tr := Image(map<crm->AmbientSpace(crm)|[crm.1-Roots(DivisionPolynomial(crm,2))[1,1]*crm.3,crm.2,crm.3]>);
qt := QuadraticTwist(tr,1/(2^20*3)^2);
