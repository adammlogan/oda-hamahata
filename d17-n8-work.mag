"defining the surface";
load "d17-n8.mag";
load "interp.mag";
load "k3pic.mag";
load "project.mag";
// "finding a few useful curves (takes 10 minutes, sorry)";
// cs := PrimeComponents(Scheme(S,S.5));
ls2 := LinearSystem(A,2);
P21 := ProjectiveSpace(F,21);
to21 := map<S->P21|Sections(ls2)>;
// time in21 := Image(to21);

"embedding the surface in P^21";
in21 := try_image(to21,{*2^^151*},2:verbose);
/*ims := [to21(S meet i): i in cs];
for i in [1..4] do Append(~ims,to21(Scheme(S,S.i))); end for;
ls2 := LinearSystem(P21,2);
for i in ims do
  ls2 := LinearSystem(ls2,i);
end for;
for i in [1..5], j in [6..12] do
  Append(~ims,to21(Scheme(S,[S.i,S.j])));
  ls2 := LinearSystem(ls2,ims[#ims]);
  if #Sections(ls2) eq 151 then break; end if;
end for;
// stop at 151

in21 := BaseScheme(ls2);*/
assert Dimension(in21) eq 2 and Degree(in21) eq 64;
to21 := map<S->in21|DefiningPolynomials(to21)>;

/*in21p := ChangeRing(in21,GF(37));
time ptin21p := RationalPoints(in21p);
// close enough ....
sptin21p := [x: x in ptin21p|IsSingular(x)];

assert IsSingular(in21![1,1,1,1,0,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0]);*/
// actually we can find all the points.
// spts := RationalPoints(&meet ims[1..4]);
spts := {@in21|[-4096,-4096,-1024,-256,0,-4096,-1024,-256,0,-256,-64,0,-16,0,0,-6,-4,1,-1,1,-1/2,1], [65536,16384,4096,1024,0,4096,1024,256,0,256,64,0,16,0,0,-6,-4,-1,1,1,1/2,1], [-512,-512,-512,-128,0,-512,-512,-128,0,-512,-128,0,-32,0,0,0,0,2,-2,0,1,0], [1,1,1,1,0,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0]@};
assert forall{x: x in spts|IsSingular(in21!x)};

"mapping to P^17";
P17 := ProjectiveSpace(F,17);
ls1 := LinearSystem(P21,1);
for i in spts do ls1 := LinearSystem(ls1,P21!i); end for;
to17 := map<in21->P17|Sections(ls1)>;
//in17 := Image(to17);
//to17 := map<in21->in17|Sections(ls1)>;

in17 := try_image(to17,{*2^^93*},2:verbose);
/*ls2 := LinearSystem(P17,2);
for s in Subsets({1..22},2) do
  ls2 := LinearSystem(ls2,to17(Scheme(in21,[P21.i: i in s])));
  printf "%o ", #Sections(ls2);
  if #Sections(ls2) eq 93 then break; end if;
end for;

in17 := BaseScheme(ls2);*/
assert Dimension(in17) eq 2;
to17 := map<in21->in17|Sections(ls1)>;
// es_17 := [to17(in21 meet i): i in ims[1..4]];
// we still don't have a nice model, but at least our elliptic curves are
// pairwise disjoint ... um, no, they somehow turned into rational curves
// apparently of self-intersection -1.  The model was more bogus than
// I realized.

// but we still have 4 singular points.

"checking singular points";
spts17 := [in17|[24,12,12,12,1,0,0,0,1,0,0,1,1,0,0,0,0,0],[ 23296, 4736, 1280, 320, -32/3, 0, 0, 0, -32/3, 0, 0, -32/3, -8/3, 0, -13/3, -1, 0, 1 ],[ -16368, -4080, -1008, 96, -256, -1008, -240, 288, -256, -48, 48, -64, -16, 0, -3, -3, 1, 1 ],[ 1008, 1008, 240, -1440, -1024, 1008, 240, -288, -256, 48, -48, -64, -16, 0, -3, -3, -1, 1 ]];
assert forall{x: x in spts17|IsSingular(x)};

ls1 := LinearSystem(P17,1);
for i in spts17 do ls1 := LinearSystem(ls1,P17!i); end for;

"projecting away from them to map to P^13";
P13 := ProjectiveSpace(F,13);
to13 := map<in17->P13|Sections(ls1)>;
//in13 := Image(to13);
//to13 := map<in17->in13|Sections(ls1)>;
in13 := try_image(to13,{*2^^43*},2:verbose);

/*ls2 := LinearSystem(P13,2);
for s in Subsets({1..18},2) do
  ls2 := LinearSystem(ls2,to13(Scheme(in17,[P17.i: i in s])));
  printf "%o ", #Sections(ls2);
  if #Sections(ls2) eq 43 then break; end if;
end for;

in13 := BaseScheme(ls2);*/
to13 := map<in17->in13|Sections(ls1)>;
// es_13 := [to13(in17 meet i): i in es_17];

// again, find them by interpolation
/*psptss := [**];
for p in PrimesInInterval(10,100) do try
    in13p := ChangeRing(in13,GF(p));
    pts13p := RationalPoints(in13p);
    spts13p := [x: x in pts13p|IsSingular(x)];
    assert #spts13p eq 8;
    Append(~psptss,spts13p);
    printf "+";
  catch e printf "."; end try;
end for;

pt1 := [recover_rat([*x[i]: x in pts*]): i in [1..14]] where pts is [*rep{r: r in p|forall{i: i in [5..14]|r[i] eq 0}}: p in psptss*];
pt2 := [recover_rat([*x[i]: x in pts*]): i in [1..14]] where pts is [*rep{r: r in p|forall{i: i in [3..13]|r[i] eq 0}}: p in psptss*];
pt3 := [recover_rat([*x[i]: x in pts*]): i in [1..14]] where pts is [*rep{r: r in p|forall{i: i in [3,7] cat [9..14]|r[i] eq 0}}: p in psptss*];
pt4 := [recover_rat([*x[i]: x in pts*]): i in [1..14]] where pts is [*rep{r: r in p|forall{i: i in [5] cat [9..14]|r[i] eq 0} and exists{i: i in [6..8]|r[i] ne 0}}: p in psptss*];*/

// the others are harder to tell apart.
"checking singular points in P^13";
spts13 := [in13|[ 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
[ -1728, -288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],
[ -52, -12, 0, 3, 4/3, -4, 0, 1, 0, 0, 0, 0, 0, 0 ],
[ 6, 4, 3, 3, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0 ]];
assert forall{x: x in spts13|IsSingular(x)};

ls1 := LinearSystem(P13,1);
for i in spts13 do ls1 := LinearSystem(ls1,P13!i); end for;

"projecting to P^9";
P9 := ProjectiveSpace(F,9);
to9 := map<in13->P9|Sections(ls1)>;
//in9 := Image(to9);
//to9 := map<in13->in9|Sections(ls1)>;

in9 := try_image(to9,{*2^^13*},2:verbose);
/*ls2 := LinearSystem(P9,2);
for s in Subsets({1..14},2) do
  ls2 := LinearSystem(ls2,to9(Scheme(in13,[P13.i: i in s])));
  printf "%o ", #Sections(ls2);
  if #Sections(ls2) eq 13 then break; end if;
end for;

in9 := BaseScheme(ls2);*/
to9 := map<in13->in9|Sections(ls1)>;
// es_9 := [to9(in13 meet i): i in es_13];
/*psptss := [**];
for p in PrimesInInterval(10,100) do try
    in9p := ChangeRing(in9,GF(p));
    pts9p := RationalPoints(in9p);
    spts9p := [x: x in pts9p|IsSingular(x)];
    assert #spts9p eq 7 and #[x: x in spts9p|x[9] eq 0] eq 3;
    Append(~psptss,spts9p);
    printf "+";
  catch e printf "."; end try;
end for;
pt1 := [recover_rat([*x[i]: x in pts*]): i in [1..10]] where pts is [*rep{r: r in p|forall{i: i in [2,3] cat [5..9]|r[i] eq 0}}: p in psptss*];
pt2 := [recover_rat([*x[i]: x in pts*]): i in [1..10]] where pts is [*rep{r: r in p|[r[i]: i in [7..10]] eq [18,9,0,1]}: p in psptss*];
pt3 := [recover_rat([*x[i]: x in pts*]): i in [1..10]] where pts is [*rep{r: r in p|r[9] eq 0 and [r[i]: i in [7..10]] notin [[0,0,0,1],[18,9,0,1]]}: p in psptss*];
pt4 := [recover_rat([*x[i]: x in pts*]): i in [1..10]] where pts is [*rep{r: r in p|[r[i]: i in [8..10]] eq [12,1,0]}: p in psptss*];
pt5 := [recover_rat([*x[i]: x in pts*]): i in [1..10]] where pts is [*rep{r: r in p|[r[i]: i in [8..10]] eq [-12,1,0]}: p in psptss*];
*/
"checking singular points in P^9";
spts9 := [in9|[ 144, 0, 0, 12, 0, 0, 0, 0, 0, 1 ], [ 54, -144, -18, 36, -54, 0, 18, 9, 0, 1 ], [ 831, 183, 24, -28, 63, 0, -15, -3, 0, 1 ],[ -1269, -471, -54, 83, -153, 7, 33, 12, 1, 0 ],[ 933, 399, 30, -45, 153, 7, -33, -12, 1, 0 ],[ 3159/5, 651/5, 108/5, 1/5, 63/5, 17/5, -3, -3/5, 1, 0 ],[ 357, 57, 12, 81/5, -63/5, 17/5, 3, 3/5, 1, 0 ]];
assert forall{x: x in spts9|IsSingular(x)};

/*P8 := ProjectiveSpace(F,8);
for i in spts9 do
  ls1 := LinearSystem(P9,1);
  ls1 := LinearSystem(ls1,P9!i);
  to8 := map<in9->P8|Sections(ls1)>;
  ls2 := LinearSystem(P8,2);
  for s in RandomSubset(Subsets({1..10},2),10) do
    ls2 := LinearSystem(ls2,to8(Scheme(in9,[P9.i: i in s])));
    printf ".";
  end for;
  bs := BaseScheme(ls2);
  <Dimension(bs),Degree(bs)>;
end for;
*/
"projecting away from some of them to get to P^5";
ls1 := LinearSystem(P9,1);
for i in spts9[4..7] do ls1 := LinearSystem(ls1,P9!i); end for;

P5 := ProjectiveSpace(F,5);
to5 := map<in9->P5|Sections(ls1)>;
in5 := Image(to5);
to5 := map<in9->in5|Sections(ls1)>;
// es_5 := [to5(i): i in es_9];

ss5 := SingularSubscheme(in5);
// lucky
pcss5 := PrimeComponents(ss5);
ls2 := LinearSystem(P5,2);
for i in pcss5 do
  ls2 := LinearSystem(ls2,i);
end for;
ls2 := LinearSystemTrace(ls2,in5);

/*P10 := ProjectiveSpace(F,10);
to10 := map<in5->P10|Sections(ls2)>;
in10 := Image(to10);
// maybe not best
to10 := map<in5->in10|Sections(ls2)>;

// more interpolation
spts10 := [in10|[51, -8, 3, 0, -167/12, -31/12, -19/48, 0, 47, 17/2, 1], [5565/2084, 9415/18756, 0, -9415/75024, -2261/8336, 0, 0, 1883/1200384, 1, 0, 0]];

P8 := ProjectiveSpace(F,8);
ls1 := LinearSystem(P10,1);
for i in spts10 do ls1 := LinearSystem(ls1,P10!i); end for;
to8 := map<in10->P8|Sections(ls1)>;
// in8 := Image(to8);
lss := [LinearSystem(P8,i): i in [2..4]];
for i in Subsets({1..11},2) do
  lss := [LinearSystem(l,r): l in lss] where r is to8(Scheme(in10,[P10.s: s in i]));
  printf "%o ", #Sections(lss[3]);
  if #Sections(lss[2]) eq 100 then break; end if;
end for;
in8 := &meet [BaseScheme(l): l in lss];
*/
spts5 := [RationalPoints(x)[1]: x in pcss5];
/*s4 := Setseq(Subsets({1..8},4));
ls1s := [LinearSystem(P5,1): i in s4];
for i in [1..#s4], j in s4[i] do
  ls1s[i] := LinearSystem(ls1s[i],P5!spts5[j]);
end for;*/

// 8 singular points, with at least one appearing to blow up to two disjoint
// -1-curves?  Very weird.
// the singular points are not all the same.  Projection from points 2 and 3
// gives a variety whose singular subscheme is 0-dimensional, as opposed to 1
// for the others.
"projecting away from one more singular point";
P4 := ProjectiveSpace(F,4);
ls1 := LinearSystem(P5,1);
ls1 := LinearSystem(ls1,P5!spts5[1]);
to4 := map<in5->P4|Sections(ls1)>;
in4 := Image(to4);
to4 := map<in5->in4|Sections(ls1)>;

"mapping by quadrics that vanish on the singular locus";
ss4 := SingularSubscheme(in4);
pcss4 := PrimeComponents(ss4);
ls2 := LinearSystem(P4,2);
for i in pcss4 do ls2 := LinearSystem(ls2,i); end for;
ls2 := LinearSystemTrace(ls2,in4);
to42 := map<in4->P4|Sections(ls2)>;
in42 := Image(to42);
to42 := map<in4->in42|Sections(ls2)>;
// degree down to 8

ss42 := SingularSubscheme(in42);
pcss42 := PrimeComponents(ss42);

"doing it again";
ls2 := LinearSystem(P4,2);
for i in pcss42 do ls2 := LinearSystem(ls2,i); end for;
ls2 := LinearSystemTrace(ls2,in42);
to52 := map<in42->P5|Sections(ls2)>;
in52 := Surface(P5,Ideal(Image(to52)));
to52 := map<in42->in52|Sections(ls2)>;
ss52 := SingularSubscheme(in52);
assert IsReduced(ss52) and Dimension(ss52) eq 0;
spts52 := RationalPoints(ss52);
assert #spts52 eq Degree(ss52);
// between in5 and in52, the rational curves get contracted, which is
// lucky, since I wasn't really trying to.

// so now we have a K3 surface!
ss4s := Setseq(Subsets({1..#spts52},4));
ls1s := [LinearSystem(P5,1): i in ss4s];
for i in [1..#ss4s], j in ss4s[i] do
  ls1s[i] := LinearSystem(ls1s[i],spts52[j]);
end for;

"found K3 surface model with only A_1 singularities, choosing a genus-1 fibration";
Ft<t> := FunctionField(F);
P1t := ProjectiveSpace(Ft,1);
P1 := ProjectiveSpace(F,1);
in52t := ChangeRing(in52,Ft);
to1s := [map<in52->P1|Sections(i)>: i in ls1s|#Sections(i) eq 2];
to1ts := [map<in52t->P1t|Sections(i)>: i in ls1s|#Sections(i) eq 2];
gfs := [Curve(Difference((P1t![t,1])@@i,BaseScheme(i))): i in to1ts];
jacs := [Jacobian(RemoveLinearRelations(Curve(i))): i in gfs];
mms := [MinimalModel(i): i in jacs];

Fs := (IsSquare(F!17) select F else ext<F|Polynomial([F|-17,0,1])>);
Fst<t> := FunctionField(Fs);
mmss := [ChangeRing(i,Fst): i in mms];
P1s := ProjectiveSpace(Fs,1);
P1st := ProjectiveSpace(Fst,1);
in52s := ChangeRing(in52,Fs);
P5s := AmbientSpace(in52s);
in52st := ChangeRing(in52,Fst);
P5st := AmbientSpace(in52st);
to1ss := [map<in52s->P1s|Sections(i)>: i in ls1s|#Sections(i) eq 2];
to1sts := [map<in52st->P1st|Sections(i)>: i in ls1s|#Sections(i) eq 2];

"finding curves in reducible fibres";
cs52 := {@@};
for i in [1..#mmss] do
  li := LocalInformation(mmss[i]);li;
  for s in li do 
    if s[5] ne KodairaSymbol("I1") then
      fib := Difference((P1s!(Numerator(Fst!Minimum(s[1])) ne 1 select [Roots(Numerator(Fst!Minimum(s[1])))[1,1]] else [1,0]))@@to1ss[i],BaseScheme(to1ss[i]));
      pcfib := {@Curve(i): i in PrimeComponents(fib)@};
      assert forall{x: x in pcfib|FieldOfGeometricIrreducibility(x) cmpeq Fs};
      cs52 join:= pcfib;
    end if;
  end for;
end for;
cs52 := {@Curve(i): i in cs52@};

"creating the Picard lattice";
// now can we make the Picard group?
spts52s := {@in52s!Eltseq(i): i in spts52@};
blowups := make_blowups(in52s: spts := spts52s, degs := [1: i in spts52s]);
pm,hypvec := picmat(in52s,blowups,spts52s,[1: i in spts52s],cs52);

Z50,Z18,to18,cls := reduce_mat(pm);
hyp := to18(hypvec);
assert (hyp,hyp) eq 8;
assert Determinant(GramMatrix(Z18)) eq -64;
// So now the question is how to get to where we're going.  Maybe there is
// an isogeny that will do it, but it might be easier just to take the Jacobian
// of a fibration without section, especially if I can find one with four D4.

// But I can't seem to find that one.  Still.
"listing genus 1 fibrations";
chs := list_chains(cls);
fibcl,ancl,dncl,encl,loops,dns,ens,ecl := ade_cls(chs,cls);
nscl := {@x: x in fibcl|forall{c: c in Basis(Z18)|IsEven((x,c))}@};
// need to know what we can divide by to get the right lattice
"figuring out what to divide by 2";
ker := Kernel(ChangeRing(GramMatrix(Z18),GF(2)));
d2 := {@Z18!x: x in ker|x ne 0 and (v,v) mod 8 eq 0 where v is Z18!x@};
exts := [divide_vec(Z18,r,2): r in d2];
dg,dgto,q,ag := dualgp(LatticeWithGram(CartanMatrix("e8d4d4")));
div_inds := [x: x in [1..#d2]|same_dual(q,ag,c,d) where _,_,c,d is dualgp(exts[x])];

"choosing a fibration with no section in the correct class";
// What we're going to do is to write down a fibration with no sections, in the
// right class that division by 2 gives us the Kummer, and going through some
// nodes so that we can cause the fibres to have low degree.
deg8 := {@x: x in nscl|(x,hyp) eq 8 and exists{r: r in div_inds|forall{a: a in Eltseq(x-d2[r])|IsEven(a)}}@};
togr := func<d|Graph<{1..#fd4}|{{x,y}:x,y in [1..#fd4]|(fd4[x],fd4[y]) gt 0}> where fd4 is [x: x in cls|(x,d) eq 0]>;
good8 := [c: c in deg8|#[s: s in cls|(c,s) eq 2 and (s,hyp) le 0] eq 2 and IsIsomorphic(togr(c),Graph<{1..16}|{{i,i+1}: i in [1..7] cat [9..15]} join {{1,8},{9,16}}>)];
// now we can do it, surely.
"writing down equations";
g8 := [x: x in cls|(x,good8[1]) eq 0];
gr8 := togr(good8[1]);
cc := ConnectedComponents(gr8);
fibs := [[g8[i]: i in [1..16]|VertexSet(gr8)!i in c]: c in cc];
ls2 := LinearSystem(P5s,2);
for i in fibs[1] do
  if (hyp,i) gt 0 then
    ls2 := LinearSystem(ls2,cs52[Index(cls,i)-6]);
  end if;
end for;
// we write R U F_1 = (Q_1 = 0) intersect in52, so that we can write
// R U F_2 = (Q_2 = 0) intersect in52.
// Then the map defined by [Q_1:Q_2] has F_1 and F_2 as fibres.
res := Scheme(in52s,ls2.1);
for i in fibs[1] do
  if (hyp,i) gt 0 then
    res := Difference(res,cs52[Index(cls,i)-6]);
  end if;
end for;
for i in fibs[2] do
  if (hyp,i) gt 0 then
    res join:= cs52[Index(cls,i)-6];
  end if;
end for;
ls2r := LinearSystem(P5s,2);
ls2r := LinearSystem(ls2r,res);
ls2r := LinearSystemTrace(ls2r,in52s);
assert #Sections(ls2r) eq 1;
a7fib := map<in52s->P1s|[ls2.1,ls2r.1]>;

// I'd like to pass to the model in P^3 where the fibres have degree 4, but
// it turns out that that's a double cover of a quadric, not a quartic.
ls1 := LinearSystem(P5s,1);
spt_ind := rep{i: i in [1..6]|cls[i] notin g8}; 
ls1 := LinearSystem(ls1,P5s!spts52s[spt_ind]);

P4s := ChangeRing(P4,Fs);
to4s := map<in52s->P4s|Sections(ls1)>;
in4s := Image(to4s);
to4s := map<in52s->in4s|Sections(ls1)>;
// _,from4s := IsInvertible(to4s);

"moving to a new model in P^4";
// we'll cheat a bit to make the map on a P^4 model
d12 := [x: x in cs52|Degree(x) lt 4];
pts52 := [rep{r: r in RationalPoints(c meet s), s in cs52 diff {@c@}|IsNonsingular(c!r)}: c in d12];
pars := [Parametrization(d12[i],d12[i]!pts52[i]): i in [1..#d12]];
rats := {@a/b: a in [-3..3], b in [1..3]@};
pts := {@p(Domain(p)![r]): p in pars, r in rats@};
pairs := [<to4s(i),a7fib(i)>: i in pts|i notin BaseScheme(to4s) and i notin BaseScheme(a7fib)];
a7fib4 := map<in4s->P1s|interpolate_from_pairs(in4s,P1s,2,{@pairs[i]: i in RandomSubset({1..#pairs},150)@})>;
// in order to have a degree-2 divisor on the generic fibre
cur := rep{cs52[i-6]: i in [1..#cls]|(cls[i],hyp) gt 0 and (cls[i],cls[spt_ind]) eq 0 and (cls[i],good8[1]) eq 2};
cur4 := to4s(in52s meet cur);

"projecting the generic fibre to P^2";
in4st := ChangeRing(in4s,Fst);
P4st := AmbientSpace(in4st);
a7fib4t := map<in4st->P1st|AllDefiningPolynomials(a7fib4)>;
a7gf := (P1st![t,1])@@a7fib4t;
div2 := &join PrimeComponents(Scheme(a7gf,DefiningPolynomials(cur4)));
P2st := ProjectiveSpace(Fst,2);
// project away from two points
to2 := map<a7gf->P2st|[x: x in DefiningPolynomials(div2)|Degree(x) eq 1]>;
// linear system calculation might be faster, but this isn't awful
a7gf2 := Image(to2);
"finding the singular points";
a7spt1 := to2(a7gf!Eltseq(to4s(spts52s[rep{i: i in [1..6]|i ne spt_ind and cls[i] notin g8}])));
ssgf2 := SingularSubscheme(a7gf2);
myaut := map<P2st->P2st|[P2st.1,P2st.2,P2st.3+P2st.2/a7spt1[2]]>;
a7aut := a7gf2@@myaut;
ssa7a := SingularSubscheme(a7aut);
ap := AffinePatch(ssa7a,1);
apspt := RationalPoints(ap)[1];
a7spt2 := myaut(a7aut!apspt);
assert forall{x: x in [a7spt1,a7spt2]|IsSingular(a7gf2!x)};
ls2 := LinearSystem(P2st,2);
"using them to map to an intersection of two quadrics in P^3";
for i in [a7spt1,a7spt2] do ls2 := LinearSystem(ls2,P2st!i); end for;
P3st := ProjectiveSpace(Fst,3);
gfto3 := map<a7gf2->P3st|Sections(ls2)>;
a7gf3 := Image(gfto3);
a7jac := Jacobian(Curve(a7gf3));
a7mm := MinimalModel(a7jac);
// let's bring it down to Q.  The code works over Q(sqrt 17), but in fact
// everything is rational along the way.
newa7 := EllipticCurveWithjInvariant(jInvariant(a7mm));
_,qt := IsQuadraticTwist(a7mm,newa7);
qta7 := QuadraticTwist(newa7,1/qt);
assert IsIsomorphic(a7mm,qta7);
Qu<u> := FunctionField(Q);
a7q := ChangeRing(qta7,Qu);
// this will end up being the twist by 17--we couldn't have known
// by playing with this model (cf. d5-n31-work.mag) we can actually reduce
// it all the way to y^2 = x^3 + (u^4 + 13*u^2 + 16)*x^2 + 4*u^4*x
rm := reduce_model(a7q);
tr := QuadraticTwist(Image(map<rm->AmbientSpace(rm)|[rm.1-3*(u^4+13*u^2+16)*rm.3,rm.2,rm.3]>),1/9);
assert aInvariants(tr) eq [0,u^4+13*u^2+16,0,4*u^4,0];
d2s := [Numerator(Fst!Minimum(i[1])): i in LocalInformation(a7mm)|i[5] eq KodairaSymbol("I1")];
pol8 := &*d2s;
coeffs := Coefficients(pol8);

// now we use the equations I found with Jared to find the values of p and q
// such that the corresponding elliptic curves in Legendre form give this
// fibration on their Kummer.  But we have to be careful, because if we only
// match the local information there's no guarantee that the fibration is
// actually the same.

"comparing to fibrations on the Kummer surface of a product";
// unfortunately this file clobbers some of our notation from above.
delete F;
load "../shtukas/all_kum_fib.mag";
kum5t := ChangeRing(kum5,Fr);
P1t := ProjectiveSpace(Fr,1);
a7fibs := [map<kum5t->P1t|DefiningPolynomials(i)>: i in all_fibs[3]];
a7gfs := [Difference((P1t![r,1])@@i,BaseScheme(i)): i in a7fibs];
a7jacs := [Jacobian(RemoveLinearRelations(Curve(i))): i in a7gfs];
deg8s := [&*[Numerator(Fr!Minimum(i[1])): i in LocalInformation(a)|i[5] eq KodairaSymbol("I1")]: a in a7jacs];
P8 := ProjectiveSpace(Q,8);
A3 := AffineSpace(Q,3);
to8s := [map<A3->P8|[Evaluate(Coefficient(d,i),[A3.1,A3.2])*A3.3^i: i in [0..8]]>: d in deg8s];
impt := P8!coeffs;
im8s := [Image(i): i in to8s];
imback := [Difference(impt@@i,BaseScheme(i)): i in to8s];
assert forall{x: x in imback|Dimension(x) eq 0 and Degree(x) eq 16};
A2 := AffineSpace(Q,2);
drop3 := map<A3->A2|[A3.1,A3.2]>;
ib2s := [drop3(i): i in imback];
assert forall{x: x in ib2s|Degree(x) eq 8};
allpts := [x: x in RationalPoints(i,Fs), i in ib2s];
ecpairs := [[EllipticCurve([0,-i-1,0,i,0]): i in Eltseq(p)]: p in allpts];
assert exists(pair){x: x in ecpairs|forall{e: e in x|Norm(Conductor(e)) eq 8}};
assert forall{x: x in pair|IsPower(Conductor(x),3)};
assert #{Conductor(x): x in pair} eq 2;
// cf. https://www.lmfdb.org/EllipticCurve/2.2.17.1/8.3/a/3
"checking the j-invariants, cf. https://www.lmfdb.org/EllipticCurve/2.2.17.1/8.3/a/3";
assert {MinimalPolynomial(jInvariant(i)): i in pair} eq {Polynomial([680136784,-112681,1])};

indpair := Index(ecpairs,pair);
indfib := (indpair-1) div 8 + 1;
pt := rep{x: x in RationalPoints(imback[indfib],Fs)|forall{i: i in [1,2]|x[i] eq allpts[indpair,i]}};
ch := hom<Fr->Fst|hom<F->Fst|pt[1],pt[2]>,pt[3]*t>;
spfib := BaseChange(a7jacs[indfib],ch);
assert jInvariant(spfib) eq jInvariant(a7mm);
// in fact they are even isomorphic, not just up to twist.  Maybe that was
// supposed to happen, though.

mypol := d/LeadingCoefficient(d) where d is Numerator(Discriminant(a7q)/u^8);
_,rt := IsSquare(Coefficient(mypol,6)/26);
if rt lt 0 then rt *:= -1; end if;
foo := BaseChange(a7q,hom<Qu->Qu|u*rt>);
tr := map<foo->AmbientSpace(foo)|[foo.1-Roots(DivisionPolynomial(foo,2))[1,1]*foo.3,foo.2,foo.3]>;
foo2 := tr(foo);
qt2 := QuadraticTwist(foo2,1/rt^4*61622437200016/4783476008149359921);
// a nicer equation could scarcely be imagined.
// we are off by a twist by 17, but I don't think that means anything.
// Other than that, this is exactly the same as tw3 from match-d17-n8.mag,
// except for changing t to it which we can only do over Q(i)!  Bizarre.
// Nevertheless, it seems that that is how it is.  The other file really
// does work with E x E^\sigma, so I don't see how it can be anything else.

// oh, wait, I think I see.  The issue is the twist by 117*a-297, whose norm
// is minus a square.  That produces a Kummer surface that is a quadratic
// twist by -1 over Q, maybe?  Let's see.

// Yes, now everything works.  I understand where the -1 comes from.
